<?php

namespace {{ namespace }};

use PDO;
use Exception;

class {{ repositoryName }}
{
    private PDO $pdo;

    public function __construct(PDO $pdo)
    {
        $this->pdo = $pdo;
    }

    /**
     * Mengirim respons JSON standar.
     */
    private function sendJsonResponse(array $data, int $statusCode = 200): void
    {
        header('Content-Type: application/json');
        http_response_code($statusCode);
        echo json_encode($data);
    }

    /**
     * Menampilkan daftar resource dengan pagination.
     */
    public function index(): void
    {
        try {
            $page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
            $perPage = isset($_GET['per_page']) ? (int)$_GET['per_page'] : 15;
            $offset = ($page - 1) * $perPage;

            // Hitung total data untuk pagination
            $totalStmt = $this->pdo->query("SELECT COUNT(*) FROM `{{ tableName }}` {{ softDeleteWhereClause }}");
            $total = $totalStmt->fetchColumn();

            // Ambil data untuk halaman saat ini
            $stmt = $this->pdo->prepare("SELECT * FROM `{{ tableName }}` {{ softDeleteWhereClause }} LIMIT :limit OFFSET :offset");
            $stmt->bindParam(':limit', $perPage, PDO::PARAM_INT);
            $stmt->bindParam(':offset', $offset, PDO::PARAM_INT);
            $stmt->execute();
            $data = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $this->sendJsonResponse([
                'total' => (int)$total,
                'per_page' => $perPage,
                'current_page' => $page,
                'last_page' => ceil($total / $perPage),
                'data' => $data
            ]);
        } catch (Exception $e) {
            $this->sendJsonResponse(['error' => 'Gagal mengambil data.', 'message' => $e->getMessage()], 500);
        }
    }

    /**
     * Menyimpan resource baru ke dalam database.
     */
    public function store(array $input): void
    {
        try {
            $sql = "INSERT INTO `{{ tableName }}` ({{ insertColumns }}) VALUES ({{ insertPlaceholders }})";
            $stmt = $this->pdo->prepare($sql);
            
            // PENTING: Urutan $input harus sama dengan urutan kolom
            $stmt->execute(array_values($input));
            
            $lastId = $this->pdo->lastInsertId();
            $this->show($lastId);
        } catch (Exception $e) {
            $this->sendJsonResponse(['error' => 'Gagal menyimpan data.', 'message' => $e->getMessage()], 500);
        }
    }

    /**
     * Menampilkan satu resource spesifik.
     */
    public function show(int $id): void
    {
        try {
            $stmt = $this->pdo->prepare("SELECT * FROM `{{ tableName }}` WHERE `id` = ? {{ softDeleteAndWhereClause }} LIMIT 1");
            $stmt->execute([$id]);
            $item = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$item) {
                $this->sendJsonResponse(['error' => 'Data tidak ditemukan.'], 404);
                return;
            }

            $this->sendJsonResponse($item);
        } catch (Exception $e) {
            $this->sendJsonResponse(['error' => 'Gagal mengambil data.', 'message' => $e->getMessage()], 500);
        }
    }

    /**
     * Memperbarui resource spesifik di database.
     */
    public function update(int $id, array $input): void
    {
        try {
            $sql = "UPDATE `{{ tableName }}` SET {{ updateSetClause }} WHERE `id` = ?";
            $stmt = $this->pdo->prepare($sql);

            // PENTING: Urutan $input harus sama dengan urutan kolom
            $values = array_values($input);
            $values[] = $id; // Tambahkan ID di akhir untuk klausa WHERE
            $stmt->execute($values);

            $this->show($id);
        } catch (Exception $e) {
            $this->sendJsonResponse(['error' => 'Gagal memperbarui data.', 'message' => $e->getMessage()], 500);
        }
    }

    /**
     * Menghapus resource.
     */
    public function destroy(int $id): void
    {
        try {
            $stmt = $this->pdo->prepare("{{ deleteStatement }}");
            $stmt->execute([$id]);
            $this->sendJsonResponse([], 204);
        } catch (Exception $e) {
            $this->sendJsonResponse(['error' => 'Gagal menghapus data.', 'message' => $e->getMessage()], 500);
        }
    }
{{ extraApiMethods }}
}