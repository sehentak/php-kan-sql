<?php

namespace App\Repositories;

use PDO;
use {{ modelNamespace }};

/**
 * Class {{ repositoryName }}
 * Bertanggung jawab atas semua interaksi database untuk entitas {{ modelName }}.
 */
class {{ repositoryName }}
{
    private PDO $pdo;

    public function __construct(PDO $pdo)
    {
        $this->pdo = $pdo;
    }

    /**
     * Mengambil satu item berdasarkan ID.
     * @return {{ modelName }}|null
     */
    public function find(int $id): ?{{ modelName }}
    {
        $stmt = $this->pdo->prepare("SELECT * FROM `{{ tableName }}` WHERE `id` = ? {{ softDeleteAndWhereClause }} LIMIT 1");
        $stmt->execute([$id]);
        $stmt->setFetchMode(PDO::FETCH_CLASS, {{ modelName }}::class);
        $result = $stmt->fetch();
        return $result ?: null;
    }

    /**
     * Mengambil semua item dengan pagination.
     * @return array{total: int, per_page: int, current_page: int, last_page: int, data: {{ modelName }}[]}
     */
    public function all(int $page = 1, int $perPage = 15): array
    {
        $offset = ($page - 1) * $perPage;

        $totalStmt = $this->pdo->query("SELECT COUNT(*) FROM `{{ tableName }}` {{ softDeleteWhereClause }}");
        $total = $totalStmt->fetchColumn();

        $stmt = $this->pdo->prepare("SELECT * FROM `{{ tableName }}` {{ softDeleteWhereClause }} LIMIT :limit OFFSET :offset");
        $stmt->bindParam(':limit', $perPage, PDO::PARAM_INT);
        $stmt->bindParam(':offset', $offset, PDO::PARAM_INT);
        $stmt->execute();
        
        $data = $stmt->fetchAll(PDO::FETCH_CLASS, {{ modelName }}::class);

        return [
            'total' => (int)$total,
            'per_page' => $perPage,
            'current_page' => $page,
            'last_page' => (int)ceil($total / $perPage),
            'data' => $data
        ];
    }
    
    /**
     * Membuat item baru dari sebuah objek Model.
     * @return {{ modelName }}|null
     */
    public function create({{ modelName }} $model): ?{{ modelName }}
    {
        $sql = "INSERT INTO `{{ tableName }}` ({{ insertColumns }}) VALUES ({{ insertPlaceholders }})";
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute([
{{ executeArrayParamsCreate }}
        ]);
        
        $lastId = $this->pdo->lastInsertId();
        return $this->find((int)$lastId);
    }

    /**
     * Memperbarui item yang ada dari sebuah objek Model.
     * @return {{ modelName }}|null
     */
    public function update(int $id, {{ modelName }} $model): ?{{ modelName }}
    {
        $sql = "UPDATE `{{ tableName }}` SET {{ updateSetClause }} WHERE `id` = ?";
        $stmt = $this->pdo->prepare($sql);
        
        $values = [
{{ executeArrayParamsUpdate }}
        ];
        $values[] = $id;
        $stmt->execute($values);

        return $this->find($id);
    }

    /**
     * Menghapus (atau soft delete) item.
     * @return bool
     */
    public function delete(int $id): bool
    {
        $stmt = $this->pdo->prepare("{{ deleteStatement }}");
        return $stmt->execute([$id]);
    }
{{ restoreMethod }}
}